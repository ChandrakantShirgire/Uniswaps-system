
#include <iostream>     // For input/output
#include <vector>       // For dynamic arrays
#include <iomanip>      // For formatting output
#include <string>       // For handling strings
#include <limits>       // For handling limits
#include <unordered_map> // For hash-based maps
#include <exception>    // For error handling
using namespace std;    // Avoids needing 'std::' before standard library names

// Custom error for invalid email
class InvalidEmailException : public exception {
public:
    const char* what() const throw() { // Gives custom error message
        return "Invalid email format. Please enter a valid email address.";
    }
};

// Item base class
class Item {
protected:
    string owner;             // Ownerâ€™s name
    string description;       // Item description
    string condition;         // Item condition (e.g., new, used)
    double price;             // Item price
    int age;                  // Age in months
    bool isAvailable;         // Availability status
    vector<string> swapHistory; // Track of past owners

public:
    // Constructor to set item details
    Item(string o, string d, string c, double p, int a)
        : owner(o), description(d), condition(c), price(p), age(a), isAvailable(true) {
        if (p <= 0) { // Set default price if invalid
            cout << "Invalid price set. Defaulting to 0.\n";
            price = 0.0;
        }
        if (a < 0) { // Set default age if invalid
            cout << "Invalid age set. Defaulting to 0.\n";
            age = 0;
        }
    }

    virtual ~Item() {} // Base destructor

    // Show item details
    virtual void displayInfo() {
        cout << setw(15) << left << owner
             << setw(25) << left << description
             << setw(15) << left << condition
             << setw(10) << left << price
             << setw(10) << left << age << " months "
             << (isAvailable ? "Available" : "Not Available") << endl;
    }

    // Swap ownership of item
    virtual void swapItem(string newOwner) {
        if (isAvailable) {
            owner = newOwner;
            isAvailable = false;
            swapHistory.push_back(newOwner); // Add new owner to history
            cout << "Item now belongs to " << newOwner << endl;
        } else {
            cout << "Item not available for swap.\n";
        }
    }

    // Show past owners
    virtual void showSwapHistory() {
        cout << "Swap history: ";
        for (const string& user : swapHistory) {
            cout << user << " ";
        }
        cout << endl;
    }

    // Set new price, checks if valid
    virtual void setPrice(double newPrice) {
        if (newPrice > 0) {
            price = newPrice;
            cout << "Price updated to " << price << endl;
        } else {
            cout << "Invalid price.\n";
        }
    }

    // Mark item as available
    virtual void sellItem() {
        cout << "Item is now available.\n";
        isAvailable = true;
    }

    virtual string getCategory() = 0; // Must define in subclass

    // Getters for price, availability, age
    double getPrice() { return price; }
    bool getAvailability() { return isAvailable; }
    int getAge() { return age; }

    // Overloaded methods to update details
    void updateDetails(double newPrice) { setPrice(newPrice); }
    void updateDetails(string newCondition) {
        condition = newCondition;
        cout << "Condition updated to " << condition << endl;
    }
    void updateDetails(int newAge) {
        if (newAge >= 0) {
            age = newAge;
            cout << "Age updated to " << age << " months\n";
        } else {
            cout << "Invalid age.\n";
        }
    }
};

// Book class, inherits Item
class Book : public Item {
private:
    string title;
    string author;

public:
    Book(string o, string d, string c, double p, int a, string t, string au)
        : Item(o, d, c, p, a), title(t), author(au) {}

    // Show book details
    void displayInfo() override {
        cout << "Book: " << title << " by " << author << endl;
        Item::displayInfo(); // Call base method
    }

    string getCategory() override { return "Book"; }

    void sellItem() override {
        cout << "Selling book: " << title << endl;
        isAvailable = true;
    }
};

// Electronics class, inherits Item
class Electronics : public Item {
private:
    string model;
    string brand;

public:
    Electronics(string o, string d, string c, double p, int a, string m, string b)
        : Item(o, d, c, p, a), model(m), brand(b) {}

    // Show electronics details
    void displayInfo() override {
        cout << "Electronics: " << brand << " " << model << endl;
        Item::displayInfo();
    }

    string getCategory() override { return "Electronics"; }

    void sellItem() override {
        cout << "Selling electronics: " << brand << " " << model << endl;
        isAvailable = true;
    }
};

// User class to represent a system user
class User {
private:
    string name;
    string email;

public:
    User(string n, string e) : name(n), email(e) {}

    string getName() { return name; }
    string getEmail() { return email; }

    void requestSwap(Item* item) {
        cout << name << " wants to swap.\n";
        item->swapItem(name);
    }

    void adjustPrice(Item* item, double newPrice) {
        cout << name << " is setting a new price.\n";
        item->setPrice(newPrice);
    }

    void viewSwapHistory(Item* item) {
        cout << name << " is viewing swap history:\n";
        item->showSwapHistory();
    }
};

// Search items based on category, price, and age
void searchItems(vector<Item*>& items, string desiredCategory, double maxPrice, int maxAge) {
    cout << "Searching items in category: " << desiredCategory
         << " with max price: " << maxPrice
         << " and max age: " << maxAge << " months\n";
    bool found = false;
    for (auto item : items) {
        if (item->getCategory() == desiredCategory && item->getPrice() <= maxPrice && item->getAge() <= maxAge) {
            item->displayInfo();
            found = true;
        }
    }

    if (!found) {
        cout << "No items match your search.\n";
    }
}

// Register a new user
User* registerUser(unordered_map<string, User*>& users) {
    string name, email;
    cout << "Enter your name: ";
    cin >> name;
    cout << "Enter your email: ";
    cin >> email;

    try {
        if (email.find('@') == string::npos || email.find('.') == string::npos) {
            throw InvalidEmailException(); // Check if email is valid
        }

        if (users.find(name) == users.end()) {
            User* newUser = new User(name, email);
            users[name] = newUser;
            cout << "User registered successfully.\n";
            return newUser;
        } else {
            cout << "User already exists. Logging in...\n";
            return users[name];
        }
    } catch (const InvalidEmailException& e) {
        cout << e.what() << endl;
        return nullptr;
    }
}

// Display all items
void displayItems(vector<Item*>& items) {
    cout << setw(15) << left << "Owner"
         << setw(25) << left << "Description"
         << setw(15) << left << "Condition"
         << setw(10) << left << "Price"
         << setw(10) << left << "Age"
         << "Availability" << endl;

    for (auto item : items) {
        item->displayInfo();
    }
}

// Buy an item based on ID
void buyItem(vector<Item*>& items, User* user) {
    displayItems(items);
    int itemId;
    cout << "Enter the item ID to buy: ";
    cin >> itemId;

    if (itemId >= 0 && itemId < items.size() && items[itemId]->getAvailability()) {
        user->requestSwap(items[itemId]);
    } else {
        cout << "Invalid item ID or not available.\n";
    }
}

// Sell a new item
void sellItem(vector<Item*>& items, User* user) {
    int choice;
    cout << "Select item type:\n1. Book\n2. Electronics\nEnter your choice: ";
    cin >> choice;

    string description, condition;
    double price;
    int age;

    cout << "Enter description: ";
    cin.ignore();
    getline(cin, description);
    cout << "Enter condition: ";
    getline(cin, condition);
    cout << "Enter price: ";
    cin >> price;
    cout << "Enter age (months): ";
    cin >> age;

    if (choice == 1) { // Book
        string title, author;
        cout << "Enter title: ";
        cin.ignore();
        getline(cin, title);
        cout << "Enter author: ";
        getline(cin, author);
        items.push_back(new Book(user->getName(), description, condition, price, age, title, author));
        cout << "Book added!\n";
    } else if (choice == 2) { // Electronics
        string model, brand;
        cout << "Enter model: ";
        cin.ignore();
        getline(cin, model);
        cout << "Enter brand: ";
        getline(cin, brand);
        items.push_back(new Electronics(user->getName(), description, condition, price, age, model, brand));
        cout << "Electronics added!\n";
    } else {
        cout << "Invalid choice.\n";
    }
}

// Main menu for user actions
void menu(vector<Item*>& items, User* user) {
    int choice;
    do {
        cout << "\n1. View all items\n2. Buy an item\n3. Sell an item\n4. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            displayItems(items);
            break;
        case 2:
            buyItem(items, user);
            break;
        case 3:
            sellItem(items, user);
            break;
        case 4:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice.\n";
            break;
        }
    } while (choice != 4);
}

// Program starts here
int main() {
    vector<Item*> items; // List of all items
    unordered_map<string, User*> users; // User list

    User* currentUser = nullptr;
    while (currentUser == nullptr) {
        currentUser = registerUser(users); // Register or log in
    }

    menu(items, currentUser); // Show main menu

    // Clean up memory
    for (auto item : items) {
        delete item;
    }
    for (auto& pair : users) {
        delete pair.second;
    }

    return 0;
