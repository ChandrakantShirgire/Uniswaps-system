#include <iostream>
#include <vector>
#include <string>
using namespace std;

class Item {
protected:
    string owner;
    string description;
    string condition;
    double price;
    bool isAvailable;
    vector<string> swapHistory;

public:
    Item(string o, string d, string c, double p) : owner(o), description(d), condition(c), price(p), isAvailable(true) {
        if (p <= 0) {
            cout << "Invalid price set for item. Setting price to 0 by default.\n";
            price = 0.0;
        }
    }

    virtual void displayInfo() {
        cout << "Owner: " << owner << ", Description: " << description << ", Condition: " << condition
             << ", Price: ₹" << price << ", Availability: " << (isAvailable ? "Available" : "Not Available") << endl;
    }

    virtual void swapItem(string newOwner) {
        if (isAvailable) {
            owner = newOwner;
            isAvailable = false;
            swapHistory.push_back(newOwner);
            cout << "Item successfully swapped to " << newOwner << endl;
        } else {
            cout << "Item is not available for swapping.\n";
        }
    }

    virtual void showSwapHistory() {
        cout << "Swap history for item: ";
        for (const string& user : swapHistory) {
            cout << user << " ";
        }
        cout << endl;
    }

    virtual void setPrice(double newPrice) {
        if (newPrice > 0) {
            price = newPrice;
            cout << "Price updated successfully to ₹" << price << endl;
        } else {
            cout << "Invalid price. Please set a positive value.\n";
        }
    }

    virtual ~Item() {}
};

class Book : public Item {
private:
    string title;
    string author;

public:
    Book(string o, string d, string c, double p, string t, string a)
    : Item(o, d, c, p), title(t), author(a) {}

    void displayInfo() override {
        cout << "Book Title: " << title << ", Author: " << author << endl;
        Item::displayInfo();
    }

    void swapItem(string newOwner) override {
        cout << "Swapping book titled '" << title << "'...\n";
        Item::swapItem(newOwner);
    }
};

class Electronics : public Item {
private:
    string model;
    string brand;

public:
    Electronics(string o, string d, string c, double p, string m, string b)
    : Item(o, d, c, p), model(m), brand(b) {}

    void displayInfo() override {
        cout << "Electronics Model: " << model << ", Brand: " << brand << endl;
        Item::displayInfo();
    }

    void swapItem(string newOwner) override {
        cout << "Swapping electronics model '" << model << "'...\n";
        Item::swapItem(newOwner);
    }
};

class Clothes : public Item {
private:
    string size;
    string type;

public:
    Clothes(string o, string d, string c, double p, string s, string t)
    : Item(o, d, c, p), size(s), type(t) {}

    void displayInfo() override {
        cout << "Clothes Type: " << type << ", Size: " << size << endl;
        Item::displayInfo();
    }

    void swapItem(string newOwner) override {
        cout << "Swapping clothes of size '" << size << "'...\n";
        Item::swapItem(newOwner);
    }
};

class Furniture : public Item {
private:
    string furnitureType;
    string material;

public:
    Furniture(string o, string d, string c, double p, string ft, string m)
    : Item(o, d, c, p), furnitureType(ft), material(m) {}

    void displayInfo() override {
        cout << "Furniture Type: " << furnitureType << ", Material: " << material << endl;
        Item::displayInfo();
    }

    void swapItem(string newOwner) override {
        cout << "Swapping furniture of type '" << furnitureType << "'...\n";
        Item::swapItem(newOwner);
    }
};

class Gadget : public Item {
private:
    string gadgetType;
    string brand;

public:
    Gadget(string o, string d, string c, double p, string gt, string b)
    : Item(o, d, c, p), gadgetType(gt), brand(b) {}

    void displayInfo() override {
        cout << "Gadget Type: " << gadgetType << ", Brand: " << brand << endl;
        Item::displayInfo();
    }

    void swapItem(string newOwner) override {
        cout << "Swapping gadget of type '" << gadgetType << "'...\n";
        Item::swapItem(newOwner);
    }
};

class User {
private:
    string name;

public:
    User(string n) : name(n) {}

    string getName() {
        return name;
    }

    void requestSwap(Item* item) {
        cout << name << " is requesting to swap the item.\n";
        item->swapItem(name);
    }

    void adjustPrice(Item* item, double newPrice) {
        cout << name << " is adjusting the price of their item.\n";
        item->setPrice(newPrice);
    }

    void viewSwapHistory(Item* item) {
        cout << "Viewing swap history for " << name << "...\n";
        item->showSwapHistory();
    }
};

void displayItems(vector<Item*>& items) {
    for (auto item : items) {
        item->displayInfo();
        cout << "--------------------------\n";
    }
}

int main() {
    vector<Item*> items;

    items.push_back(new Book("John", "Good condition", "Used", 500.50, "The Great Gatsby", "F. Scott Fitzgerald"));
    items.push_back(new Electronics("Sarah", "Almost new", "New", 23000.00, "iPhone X", "Apple"));
    items.push_back(new Clothes("Alice", "Like new", "Used", 700.00, "M", "T-shirt"));
    items.push_back(new Furniture("Tom", "Slightly worn", "Used", 5000.00, "Chair", "Wood"));
    items.push_back(new Gadget("Emma", "Brand new", "New", 12000.00, "Smartwatch", "Samsung"));

    cout << "Items available on UniSwap:\n";
    displayItems(items);

    User user1("Michael");
    User user2("Jessica");

    cout << "\n--- Users requesting swaps and adjusting prices ---\n";
    user1.requestSwap(items[0]);
    user2.adjustPrice(items[1], 21000.00);
    user2.requestSwap(items[1]);

    cout << "\n--- Viewing Swap History ---\n";
    user1.viewSwapHistory(items[0]);
    user2.viewSwapHistory(items[1]);

    for (auto item : items) {
        delete item;
    }

    return 0;
}
